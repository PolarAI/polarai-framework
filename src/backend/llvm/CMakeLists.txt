set(ATH_BACKEND_LLVM "AthenaBackendLLVM" CACHE STRING "" FORCE)

if(POLICY CMP0068)
    cmake_policy(SET CMP0068 NEW)
    set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON)
endif()

if(POLICY CMP0075)
    cmake_policy(SET CMP0075 NEW)
endif()

if(POLICY CMP0077)
    cmake_policy(SET CMP0077 NEW)
endif()

find_package(LLVM REQUIRED CONFIG)
find_package(MLIR REQUIRED CONFIG)
find_package(Python3 COMPONENTS Interpreter)

list(APPEND CMAKE_MODULE_PATH "${MLIR_CMAKE_DIR}")
list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
include(TableGen)
include(AddLLVM)
include(AddMLIR)

# FIXME Ninja doesn't work with this
# include(HandleLLVMOptions)

message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

add_subdirectory(runtime/support)
add_subdirectory(jit)

find_package(OpenCL)
if (${OpenCL_FOUND})
    add_subdirectory(runtime/opencl)
else()
    set(ATH_HAS_OPENCL "false" CACHE STRING "" FORCE)
endif ()

add_subdirectory(runtime/driver)

add_custom_target(ath_llvm_rt_images
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/images.hpp)

if (TARGET kernels_spirv)
    add_dependencies(ath_llvm_rt_images kernels_spirv)
    get_target_property(__binary kernels_spirv BINARY_FILE)
    list(APPEND IMAGE_BINARIES ${__binary})
endif()

string(REPLACE ";" " " IMAGE_BINARIES_STR ${IMAGE_BINARIES})

add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/images.hpp 
    COMMAND ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/utils/kernels/bin2c.py
    --header ${CMAKE_CURRENT_BINARY_DIR}/images.hpp
    ${IMAGE_BINARIES_STR})

add_athena_library(${ATH_BACKEND_LLVM} STATIC
        ATH_BACKEND_LLVM # export name
        backend/llvm/llvm_export.h
        LLVMExecutor.cpp
        GraphPartitionPlanner.cpp
        allocators/LayerAllocator.cpp
        ImageManager.cpp
        CodeGen.cpp)

# FIXME this isn't always true
target_compile_definitions(${ATH_BACKEND_LLVM} PRIVATE -DHAS_SPIRV=1)
add_dependencies(${ATH_BACKEND_LLVM} ath_llvm_rt_images)

target_include_directories(${ATH_BACKEND_LLVM} PRIVATE 
                          ${LLVM_INCLUDE_DIRS}
                          ${CMAKE_CURRENT_BINARY_DIR})
target_compile_definitions(${ATH_BACKEND_LLVM} PRIVATE ${LLVM_DEFINITIONS})

llvm_map_components_to_libnames(llvm_libs
        core
        irreader
        support
        transformutils
        passes
        codegen
        orcjit
        AllTargetsCodeGens
        AllTargetsAsmParsers
        AllTargetsDescs
        AllTargetsInfos
        lto)

if (APPLE)
    set(WHOLE_ARCHIVE -Wl,-all_load)
    set(NOWHOLE_ARCHIVE)
elseif (UNIX)
    set(WHOLE_ARCHIVE -Wl,--whole-archive)
    set(NOWHOLE_ARCHIVE -Wl,--no-whole-archive)
endif ()

target_link_libraries(${ATH_BACKEND_LLVM} PRIVATE
        ${llvm_libs}
        ${AthenaJitTarget}
        MLIRIR
        MLIRStandardOps
        MLIRAthenaGraph
        ${ATH_RT_LLVM_SUPPORT_OBJ}
        ${ATH_RT_LLVM_DRIVER}
        )
target_include_directories(${ATH_BACKEND_LLVM} PRIVATE
        ${PROJECT_SOURCE_DIR}/utils/dialects/include
        ${PROJECT_BINARY_DIR}/utils/dialects/include)
